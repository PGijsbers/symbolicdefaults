from deap import tools
from deap.algorithms import varOr


def one_plus_lambda(toolbox, P=None, popsize=50, new_per_gen=50, ngen=100, halloffame=None, stats=None, logbook=None):
    P = P if P is not None else toolbox.individual()

    for i in range(ngen):
        # evaluate population
        C = [toolbox.mutate(toolbox.clone(P))[0] for _ in range(popsize)]
        C = C + [toolbox.individual() for _ in range(new_per_gen)]
        C = C + [P]

        fitnesses = toolbox.map(toolbox.evaluate, C)
        for ind, fit in zip(C, fitnesses):
            ind.fitness.values = fit

        P = max(C, key=lambda ind: ind.fitness.wvalues)

        if halloffame is not None:
            halloffame.update(C)

        if logbook is not None:
            record = stats.compile(C) if stats is not None else {}
            logbook.record(gen=i, nevals=len(C), **record)

    return P, C


# Code below taken from DEAP: https://github.com/DEAP/deap, with one modification.
def eaMuPlusLambda(population, toolbox, mu, lambda_, cxpb, mutpb, ngen,
                   stats=None, halloffame=None, verbose=__debug__,):
    """This is the :math:`(\mu + \lambda)` evolutionary algorithm.

    :param population: A list of individuals.
    :param toolbox: A :class:`~deap.base.Toolbox` that contains the evolution
                    operators.
    :param mu: The number of individuals to select for the next generation.
    :param lambda\_: The number of children to produce at each generation.
    :param cxpb: The probability that an offspring is produced by crossover.
    :param mutpb: The probability that an offspring is produced by mutation.
    :param ngen: The number of generation.
    :param stats: A :class:`~deap.tools.Statistics` object that is updated
                  inplace, optional.
    :param halloffame: A :class:`~deap.tools.HallOfFame` object that will
                       contain the best individuals, optional.
    :param verbose: Whether or not to log the statistics.
    :returns: The final population
    :returns: A class:`~deap.tools.Logbook` with the statistics of the
              evolution.

    The algorithm takes in a population and evolves it in place using the
    :func:`varOr` function. It returns the optimized population and a
    :class:`~deap.tools.Logbook` with the statistics of the evolution. The
    logbook will contain the generation number, the number of evalutions for
    each generation and the statistics if a :class:`~deap.tools.Statistics` is
    given as argument. The *cxpb* and *mutpb* arguments are passed to the
    :func:`varOr` function. The pseudocode goes as follow ::

        evaluate(population)
        for g in range(ngen):
            offspring = varOr(population, toolbox, lambda_, cxpb, mutpb)
            evaluate(offspring)
            population = select(population + offspring, mu)

    First, the individuals having an invalid fitness are evaluated. Second,
    the evolutionary loop begins by producing *lambda_* offspring from the
    population, the offspring are generated by the :func:`varOr` function. The
    offspring are then evaluated and the next generation population is
    selected from both the offspring **and** the population. Finally, when
    *ngen* generations are done, the algorithm returns a tuple with the final
    population and a :class:`~deap.tools.Logbook` of the evolution.

    This function expects :meth:`toolbox.mate`, :meth:`toolbox.mutate`,
    :meth:`toolbox.select` and :meth:`toolbox.evaluate` aliases to be
    registered in the toolbox. This algorithm uses the :func:`varOr`
    variation.
    """
    logbook = tools.Logbook()
    logbook.header = ['gen', 'nevals'] + (stats.fields if stats else [])

    # Evaluate the individuals with an invalid fitness
    invalid_ind = [ind for ind in population if not ind.fitness.valid]
    fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)
    for ind, fit in zip(invalid_ind, fitnesses):
        ind.fitness.values = fit

    if halloffame is not None:
        halloffame.update(population)

    record = stats.compile(population) if stats is not None else {}
    logbook.record(gen=0, nevals=len(invalid_ind), **record)
    if verbose:
        print(logbook.stream)

    # Begin the generational process
    for gen in range(1, ngen + 1):
        # Vary the population
        offspring = varOr(population, toolbox, lambda_, cxpb, mutpb)

        # Evaluate the individuals with an invalid fitness
        invalid_ind = [ind for ind in offspring]  # <<<<
        fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)
        for ind, fit in zip(invalid_ind, fitnesses):
            ind.fitness.values = fit

        # ====================== MODIFICATION ========================
        # re-evaluate old population here (after creating offspring)
        # this is used when evaluations are performed on only a subset of tasks,
        # as otherwise an 'easy' subset of tasks may lead to a permanent high score.
        # if no_cache:
        #     fitnesses = toolbox.map(toolbox.evaluate, population)
        #     for ind, fit in zip(population, fitnesses):
        #         ind.fitness.values = fit
        # ============================================================

        # Update the hall of fame with the generated individuals
        if halloffame is not None:
            halloffame.update(offspring)

        # for ind in offspring:
        #     print(f"[{str(ind)}|{ind.fitness}]")

        # Select the next generation population
        population[:] = toolbox.select(population + offspring, mu)

        # Update the statistics with the new population
        record = stats.compile(population) if stats is not None else {}
        logbook.record(gen=gen, nevals=len(invalid_ind), **record)
        if verbose:
            print(logbook.stream)
            
    return population, logbook


def random_search(toolbox, popsize, halloffame=None):
    random_population = toolbox.population(popsize)
    fitnesses = toolbox.map(toolbox.evaluate, random_population)
    for ind, fit in zip(random_population, fitnesses):
        ind.fitness.values = fit
    # Update the hall of fame with the generated individuals
    if halloffame is not None:
        halloffame.update(random_population)
    return random_population
